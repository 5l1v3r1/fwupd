This fixes problems with valgrind not being available and running on installs
without /boot/efi.  It's a culmination of backported commits from after upstream
release 0.8.1.

diff --git a/Makefile.am b/Makefile.am
index 3168066..27ef8e3 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -57,6 +57,7 @@ DISTCHECK_CONFIGURE_FLAGS =				\
 	--enable-uefi					\
 	--enable-dell					\
 	--with-udevrulesdir=$$dc_install_base/$(udevrulesdir) \
+	--with-bootdir=$$dc_install_base/$(bootdir) \
 	--with-systemdunitdir=$$dc_install_base/$(systemdunitdir)
 
 GITIGNOREFILES =					\
diff --git a/configure.ac b/configure.ac
index 5446f76..99c7a1a 100644
--- a/configure.ac
+++ b/configure.ac
@@ -144,7 +144,16 @@ PKG_CHECK_MODULES(GUSB, gusb >= 0.2.9)
 PKG_CHECK_MODULES(SQLITE, sqlite3)
 PKG_CHECK_MODULES(ARCHIVE, libarchive)
 PKG_CHECK_MODULES(SOUP, libsoup-2.4 >= 2.51.92)
-PKG_CHECK_MODULES(VALGRIND, valgrind)
+PKG_CHECK_MODULES(VALGRIND, valgrind,
+		  has_valgrind=yes,
+		  has_valgrind=no)
+if test x$has_valgrind = xyes; then
+	AC_DEFINE(HAVE_VALGRIND,1,
+	          [Define as 1 if you have valgrind])
+else
+	has_valgrind=no
+fi
+
 AC_PATH_PROG(DOCBOOK2MAN, docbook2man)
 if test -z $DOCBOOK2MAN ; then
 	AC_MSG_ERROR([docbook2man program not found])
@@ -335,6 +344,13 @@ AC_ARG_WITH([systemdunitdir],
             [with_systemdunitdir=$($PKG_CONFIG --variable=systemdsystemunitdir systemd)])
 AC_SUBST([systemdunitdir], [$with_systemdunitdir])
 
+# EFI system partition location
+AC_ARG_WITH([bootdir],
+            AS_HELP_STRING([--with-bootdir=DIR], [Directory for EFI system partition]),
+            [],
+            [with_bootdir=/boot/efi])
+AC_SUBST([bootdir], [$with_bootdir])
+
 # udev rules
 AC_ARG_WITH([udevrulesdir],
             AS_HELP_STRING([--with-udevrulesdir=DIR], [Directory for udev rules files]),
diff --git a/data/Makefile.am b/data/Makefile.am
index 0b1417e..41837ca 100644
--- a/data/Makefile.am
+++ b/data/Makefile.am
@@ -18,6 +18,8 @@ $(dbusservicemain_DATA): $(dbusservicemain_in_files) Makefile
 
 %.service: %.service.in Makefile
 	$(AM_V_GEN)sed -e 's|\@servicedir\@|$(libexecdir)|' \
+	               -e 's|\@localstatedir\@|$(localstatedir)|' \
+	               -e 's|\@bootdir\@|$(bootdir)|' \
 	               -e 's|\@bindir\@|$(bindir)|' \
 	               -e 's|\@daemon_user\@|$(daemon_user)|' $< > $@.tmp && mv $@.tmp $@
 
@@ -28,7 +30,7 @@ systemdservice_in_files =				\
 systemdservice_DATA = $(systemdservice_in_files:.service.in=.service)
 
 install-data-hook:
-	mkdir -p $(DESTDIR)$(systemdunitdir)/system-update.target.wants
+	$(MKDIR_P) $(DESTDIR)$(systemdunitdir)/system-update.target.wants
 	ln -sf ../fwupd-offline-update.service $(DESTDIR)$(systemdunitdir)/system-update.target.wants/fwupd-offline-update.service
 
 udevrules_DATA =					\
diff --git a/data/fwupd.service.in b/data/fwupd.service.in
index 480bd96..987aeab 100644
--- a/data/fwupd.service.in
+++ b/data/fwupd.service.in
@@ -16,4 +16,4 @@ ProtectKernelModules=yes
 ProtectSystem=full
 RestrictAddressFamilies=AF_NETLINK AF_UNIX
 RestrictRealtime=yes
-ReadWritePaths=/var/lib/fwupd /boot/efi
+ReadWritePaths=@localstatedir@/lib/fwupd -@bootdir@
diff --git a/src/Makefile.am b/src/Makefile.am
index af11a12..748d9d6 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -161,7 +161,7 @@ fu_self_test_CFLAGS =					\
 TESTS = fu-self-test
 
 install-data-hook:
-	if test -w $(DESTDIR)$(prefix)/; then \
+	if test -w $$(dirname $(DESTDIR)$(localstatedir)/); then \
 		mkdir -p $(DESTDIR)$(localstatedir)/lib/fwupd; \
 		chmod 0755 $(DESTDIR)$(localstatedir)/lib/fwupd; \
 		mkdir -p $(DESTDIR)$(localstatedir)/cache/app-info/xmls; \
diff --git a/src/fu-plugin.c b/src/fu-plugin.c
index eaadba6..11eb8b2 100644
--- a/src/fu-plugin.c
+++ b/src/fu-plugin.c
@@ -27,7 +27,9 @@
 #include <errno.h>
 #include <string.h>
 #include <gio/gunixinputstream.h>
+#ifdef HAVE_VALGRIND
 #include <valgrind.h>
+#endif /* HAVE_VALGRIND */
 
 #include "fu-plugin-private.h"
 #include "fu-pending.h"
